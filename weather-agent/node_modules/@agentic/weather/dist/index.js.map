{"version":3,"sources":["../src/weather-client.ts"],"sourcesContent":["import {\n  aiFunction,\n  AIFunctionsProvider,\n  assert,\n  getEnv,\n  sanitizeSearchParams\n} from '@agentic/core'\nimport defaultKy, { type KyInstance } from 'ky'\nimport { z } from 'zod'\n\nexport namespace weatherapi {\n  export const BASE_URL = 'https://api.weatherapi.com/v1'\n\n  export interface CurrentWeatherResponse {\n    current: CurrentWeather\n    location: WeatherLocation\n  }\n\n  export interface CurrentWeather {\n    cloud: number\n    condition: WeatherCondition\n    feelslike_c: number\n    feelslike_f: number\n    gust_kph: number\n    gust_mph: number\n    humidity: number\n    is_day: number\n    last_updated: string\n    last_updated_epoch: number\n    precip_in: number\n    precip_mm: number\n    pressure_in: number\n    pressure_mb: number\n    temp_c: number\n    temp_f: number\n    uv: number\n    vis_km: number\n    vis_miles: number\n    wind_degree: number\n    wind_dir: string\n    wind_kph: number\n    wind_mph: number\n  }\n\n  export interface WeatherCondition {\n    code: number\n    icon: string\n    text: string\n  }\n\n  export interface WeatherLocation {\n    country: string\n    lat: number\n    localtime: string\n    localtime_epoch: number\n    lon: number\n    name: string\n    region: string\n    tz_id: string\n  }\n\n  export interface WeatherIPInfoResponse {\n    ip: string\n    type: string\n    continent_code: string\n    continent_name: string\n    country_code: string\n    country_name: string\n    is_eu: string\n    geoname_id: number\n    city: string\n    region: string\n    lat: number\n    lon: number\n    tz_id: string\n    localtime_epoch: number\n    localtime: string\n  }\n}\n\n/**\n * Simple Weather API client for accessing weather data based on location.\n *\n * @see https://www.weatherapi.com\n */\nexport class WeatherClient extends AIFunctionsProvider {\n  protected readonly ky: KyInstance\n  protected readonly apiKey: string\n  protected readonly apiBaseUrl: string\n\n  constructor({\n    apiKey = getEnv('WEATHER_API_KEY'),\n    apiBaseUrl = weatherapi.BASE_URL,\n    ky = defaultKy\n  }: {\n    apiKey?: string\n    apiBaseUrl?: string\n    ky?: KyInstance\n  } = {}) {\n    assert(\n      apiKey,\n      'WeatherClient missing required \"apiKey\" (defaults to \"WEATHER_API_KEY\")'\n    )\n    super()\n\n    this.apiKey = apiKey\n    this.apiBaseUrl = apiBaseUrl\n\n    this.ky = ky.extend({ prefixUrl: apiBaseUrl })\n  }\n\n  /**\n   * Gets info about the current weather at a given location.\n   */\n  @aiFunction({\n    name: 'get_current_weather',\n    description: 'Gets info about the current weather at a given location.',\n    inputSchema: z.object({\n      q: z\n        .string()\n        .describe(\n          'Location to get the weather for. Can be a city name, zipcode, IP address, or lat/lng coordinates. Example: \"London\"'\n        )\n    })\n  })\n  async getCurrentWeather(queryOrOptions: string | { q: string }) {\n    const options =\n      typeof queryOrOptions === 'string'\n        ? { q: queryOrOptions }\n        : queryOrOptions\n\n    return this.ky\n      .get('current.json', {\n        searchParams: sanitizeSearchParams({\n          key: this.apiKey,\n          ...options\n        })\n      })\n      .json<weatherapi.CurrentWeatherResponse>()\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,OAAO,eAAoC;AAC3C,SAAS,SAAS;AAEX,IAAU;AAAA,CAAV,CAAUA,gBAAV;AACE,EAAMA,YAAA,WAAW;AAAA,GADT;AAVjB;AAqFO,IAAM,gBAAN,eAA4B,0BA6BjC,0BAAC,WAAW;AAAA,EACV,MAAM;AAAA,EACN,aAAa;AAAA,EACb,aAAa,EAAE,OAAO;AAAA,IACpB,GAAG,EACA,OAAO,EACP;AAAA,MACC;AAAA,IACF;AAAA,EACJ,CAAC;AACH,CAAC,IAvCgC,IAAoB;AAAA,EAKrD,YAAY;AAAA,IACV,SAAS,OAAO,iBAAiB;AAAA,IACjC,aAAa,WAAW;AAAA,IACxB,KAAK;AAAA,EACP,IAII,CAAC,GAAG;AACN;AAAA,MACE;AAAA,MACA;AAAA,IACF;AACA,UAAM;AAlBH;AACL,wBAAmB;AACnB,wBAAmB;AACnB,wBAAmB;AAiBjB,SAAK,SAAS;AACd,SAAK,aAAa;AAElB,SAAK,KAAK,GAAG,OAAO,EAAE,WAAW,WAAW,CAAC;AAAA,EAC/C;AAAA,EAgBA,MAAM,kBAAkB,gBAAwC;AAC9D,UAAM,UACJ,OAAO,mBAAmB,WACtB,EAAE,GAAG,eAAe,IACpB;AAEN,WAAO,KAAK,GACT,IAAI,gBAAgB;AAAA,MACnB,cAAc,qBAAqB;AAAA,QACjC,KAAK,KAAK;AAAA,QACV,GAAG;AAAA,MACL,CAAC;AAAA,IACH,CAAC,EACA,KAAwC;AAAA,EAC7C;AACF;AAvDO;AAwCL,4BAAM,qBAXN,wBA7BW;AAAN,2BAAM;","names":["weatherapi"]}